using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace MvvmLib.Ioc
{
    [DebuggerDisplay("{DebugDisplay,nq}")]
    readonly struct RegistrationKey : IEquatable<RegistrationKey>
    {
        public Type Type { get; }
        public string Key { get; }


        [ExcludeFromCodeCoverage]   // debugger utility
        private string DebugDisplay
        {
            get
            {
                string key = !(Key is null)
                    ? $"\"{Key}\""
                    : "(null)";

                return $"{{ {Type} : {key} }}";
            }
        }


        public RegistrationKey(Type type, string name)
        {
            Type = type;
            Key = name;
        }


        public bool Equals(RegistrationKey other)
        {
            return EqualityComparer<Type>.Default.Equals(Type, other.Type)
                && StringComparer.Ordinal.Equals(Key, other.Key);
        }

        public override int GetHashCode()
        {
            // numbers generated by visual studio
            var hashCode = -1979447941;

            hashCode = hashCode * -1521134295 + EqualityComparer<Type>.Default.GetHashCode(Type);

            int nameHash = Key is null
                ? 0
                : StringComparer.Ordinal.GetHashCode(Key);
            hashCode = hashCode * -1521134295 + nameHash;

            return hashCode;
        }
    }
}
